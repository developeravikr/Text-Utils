{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","react_default","a","createElement","className","style","backgroundColor","mode","color","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","concat","react_router_dom","to","title","aria-label","aria-current","about","onClick","toggleBtn","htmlFor","role","placeholder","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","changeTextStyle","Fragment","heading","value","onChange","e","textBox","document","getElementById","rows","disabled","length","newText","split","join","trim","capitalFirst","forEach","charAt","toUpperCase","slice","toLowerCase","trimEnd","select","navigator","clipboard","writeText","showAlert","filter","element","Alert","capitalize","word","capText","height","padding","alert","msg","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","react_router","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4f83af76.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n    return (\r\n        <div className=\"container my-3 rounded\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'light' ? 'black' : 'white' }}>\r\n            <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} sticky-top`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/text\">Text</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">{props.about}</Link>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className={`form-check form-switch m-3 ms-0 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleBtn} />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark/Light</label>\r\n                    </div>\r\n\r\n                    <form className=\"d-flex\" role=\"search\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// Validating the value of title and string as string \r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n};\r\n\r\n// If props value is not passed, default value will be set here \r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    about: 'Set about text here'\r\n};","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, changeTextStyle] = useState(\"\");\r\n    // text = \"new value\"; // wrong way to change state value\r\n    // changeTextStyle(\"new value\"); // Correct way to change state value\r\n\r\n    // const charWordPara = () => {\r\n    //     let words = text.trim();\r\n    //     if (words.length !== 0) {\r\n    //         words = words.split(/\\s+/);\r\n    //     }\r\n\r\n    //     let charac;\r\n    //     let characLength;\r\n    //     if (words.length === 0) {\r\n    //         characLength = 0;\r\n    //     }\r\n    //     else {\r\n    //         charac = String(words);\r\n    //         characLength = charac.length - words.length + 1;\r\n    //     }\r\n\r\n    //     let para = text;\r\n    //     let paraLength;\r\n    //     if (words.length === 0) {\r\n    //         paraLength = 0;\r\n    //     }\r\n    //     else {\r\n    //         para = text.split(/\\n+?\\s+\\w+/);\r\n    //         paraLength = para.length;\r\n    //     }\r\n\r\n    //     const counting = document.getElementById(\"counting\");\r\n    //     counting.innerHTML = `${words.length} words and ${characLength} characters and ${paraLength} paragraphs`\r\n    // }\r\n\r\n    // To convert in uppercase \r\n    const changeToUppercase = () => {\r\n        let textBox = document.getElementById(\"textBox\");\r\n\r\n        changeTextStyle(textBox.value.toUpperCase());\r\n    }\r\n\r\n    // To copy text to clipboard with alert\r\n    const copyText = () => {\r\n        let textBox = document.getElementById(\"textBox\");\r\n\r\n        if (textBox.value.length >= 1) {\r\n            textBox.select();\r\n            // text.setSelectionRange(0, 9999);\r\n            navigator.clipboard.writeText(textBox.value);\r\n            props.showAlert(\"your text is copied.\", \"success\");\r\n        }\r\n        else {\r\n            props.showAlert(\"Nothing to copy, please type first...\", \"danger\");\r\n        }\r\n    }\r\n\r\n    // to change the value of textarea or input value for textarea \r\n    const onChangeFn = (e) => {\r\n        let textBox = document.getElementById(\"textBox\");\r\n        changeTextStyle(textBox.value);\r\n    }\r\n\r\n    // To clear all text\r\n    const clearText = () => {\r\n        changeTextStyle(\"\");\r\n    }\r\n\r\n    // Remove extra spaces\r\n    const removeExtraSpaces = () => {\r\n        let newText = text.split(/\\s+/);\r\n        changeTextStyle((newText.join(\" \")).trim());\r\n    }\r\n\r\n    // Making first letter capital of all words\r\n    const firstLetterCapital = () => {\r\n        let newText = text.split(/\\s+/);\r\n        let capitalFirst = \"\";\r\n        newText.forEach(function (e) {\r\n            capitalFirst += e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() + \" \";\r\n        });\r\n        capitalFirst = capitalFirst.trimEnd();\r\n        changeTextStyle(capitalFirst);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container my-3' style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h1>{props.heading}</h1>\r\n                <textarea className=\"form-control mt-3\" value={text} placeholder=\"Type here ...\" onChange={onChangeFn} id=\"textBox\" rows=\"3\" style={{ backgroundColor: props.mode === 'dark' ? 'gray' : 'white', color: props.mode === 'light' ? 'black' : 'white' }}></textarea>\r\n                <button disabled={text.length===0} className=\"btn btn-primary my-3\" onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary m-3\" onClick={firstLetterCapital}>First Letter Capital</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary my-3\" onClick={changeToUppercase}>Convert to Uppercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary m-3\" onClick={copyText}>Copy Text</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary my-3\" onClick={clearText}>Clear Text</button>\r\n\r\n                <h2>Your text summary</h2>\r\n                <p id='counting'>{text.trim().split(/\\s+/).filter((element) => { return element.length !== 0 }).length} words, {text.length} characters and {text.trim().split(/\\n+/).filter((element) => { return element.length !== 0 }).length} paragraphs</p>\r\n\r\n                <h3>Preview Text:</h3>\r\n                <p>{text.trim().length > 0 ? text : \"Nothing to preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const capText = word.toLowerCase();\r\n        return capText.charAt(0).toUpperCase() + capText.slice(1).toLowerCase();\r\n    }\r\n\r\n    return (\r\n        // short form of if (this is true then this is to be done) statement\r\n        <div style={{height:\"50px\", padding:\"5px\"}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\"><strong>{capitalize(\"alert\")}</strong>: {capitalize(props.alert.msg)}</div>}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const toggleBtn = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'gray';\n      showAlert(\"dark mode is enabled.\", \"light\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode is enabled.\", \"dark\");\n    }\n  }\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    // Making alert auto removable after 2 seconds\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"FirstApp\" about=\"About\" mode={mode} toggleBtn={toggleBtn} />\n        <Alert alert={alert} />\n        <Routes>\n          {/* React do partial matching, so use exact path to match exact url  */}\n          <Route exact path=\"/text\" element={\n            <>\n              <TextForm heading=\"Convert your text to UPPERCASE\" mode={mode} showAlert={showAlert} />\n            </>\n          } />\n        </Routes>\n        <Routes>\n          <>\n            <Route path=\"/about\" element={\n              <About mode={mode} />} />\n          </>\n        </Routes>\n      </Router >\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}